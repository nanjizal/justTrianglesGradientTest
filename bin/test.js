// Generated by Haxe 3.4.0 (git build development @ 4a40be3)
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var Test = function() {
	this.bird_d = "M210.333,65.331C104.367,66.105-12.349,150.637,1.056,276.449c4.303,40.393,18.533,63.704,52.171,79.03c36.307,16.544,57.022,54.556,50.406,112.954c-9.935,4.88-17.405,11.031-19.132,20.015c7.531-0.17,14.943-0.312,22.59,4.341c20.333,12.375,31.296,27.363,42.979,51.72c1.714,3.572,8.192,2.849,8.312-3.078c0.17-8.467-1.856-17.454-5.226-26.933c-2.955-8.313,3.059-7.985,6.917-6.106c6.399,3.115,16.334,9.43,30.39,13.098c5.392,1.407,5.995-3.877,5.224-6.991c-1.864-7.522-11.009-10.862-24.519-19.229c-4.82-2.984-0.927-9.736,5.168-8.351l20.234,2.415c3.359,0.763,4.555-6.114,0.882-7.875c-14.198-6.804-28.897-10.098-53.864-7.799c-11.617-29.265-29.811-61.617-15.674-81.681c12.639-17.938,31.216-20.74,39.147,43.489c-5.002,3.107-11.215,5.031-11.332,13.024c7.201-2.845,11.207-1.399,14.791,0c17.912,6.998,35.462,21.826,52.982,37.309c3.739,3.303,8.413-1.718,6.991-6.034c-2.138-6.494-8.053-10.659-14.791-20.016c-3.239-4.495,5.03-7.045,10.886-6.876c13.849,0.396,22.886,8.268,35.177,11.218c4.483,1.076,9.741-1.964,6.917-6.917c-3.472-6.085-13.015-9.124-19.18-13.413c-4.357-3.029-3.025-7.132,2.697-6.602c3.905,0.361,8.478,2.271,13.908,1.767c9.946-0.925,7.717-7.169-0.883-9.566c-19.036-5.304-39.891-6.311-61.665-5.225c-43.837-8.358-31.554-84.887,0-90.363c29.571-5.132,62.966-13.339,99.928-32.156c32.668-5.429,64.835-12.446,92.939-33.85c48.106-14.469,111.903,16.113,204.241,149.695c3.926,5.681,15.819,9.94,9.524-6.351c-15.893-41.125-68.176-93.328-92.13-132.085c-24.581-39.774-14.34-61.243-39.957-91.247c-21.326-24.978-47.502-25.803-77.339-17.365c-23.461,6.634-39.234-7.117-52.98-31.273C318.42,87.525,265.838,64.927,210.333,65.331zM445.731,203.01c6.12,0,11.112,4.919,11.112,11.038c0,6.119-4.994,11.111-11.112,11.111s-11.038-4.994-11.038-11.111C434.693,207.929,439.613,203.01,445.731,203.01z";
	this.col2 = [1,0];
	this.col = [3,1,3,4,1,6,7,3];
	this.colors = [];
	this.matrix32Array = new Float32Array([1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0]);
	this.modelViewProjection = new khaMath_Matrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	this.indices = [];
	this.texturePos = [];
	this.vertices = [];
	this.rainbow = [0,16711680,16744192,16776960,65280,255,4915330,9699539];
	this.gl = this.createWebGl(1024,1024);
	var gl = this.gl;
	var gl1 = this.gl;
	var shader = gl1.createShader(35633);
	gl1.shaderSource(shader,"attribute vec3 pos;" + "attribute vec4 color;" + "varying vec4 vcol;" + "uniform mat4 modelViewProjection;" + "void main(void) {" + " gl_Position = vec4(pos, 1.0);" + " vcol = color;" + "}");
	gl1.compileShader(shader);
	var gl2 = this.gl;
	var shader1 = gl2.createShader(35632);
	gl2.shaderSource(shader1,"precision mediump float;" + "varying vec4 vcol;" + "void main(void) {" + " gl_FragColor = vcol;" + "}");
	gl2.compileShader(shader1);
	var program = gl.createProgram();
	gl.attachShader(program,shader);
	gl.attachShader(program,shader1);
	gl.linkProgram(program);
	this.program0 = program;
	var gl3 = this.gl;
	var gl4 = this.gl;
	var shader2 = gl4.createShader(35633);
	gl4.shaderSource(shader2,"attribute vec3 pos;" + "attribute vec2 aTexture;" + "varying vec2 texture;" + "uniform mat4 modelViewProjection;" + "void main(void) {" + " gl_Position = modelViewProjection * vec4( pos, 1.0);" + " texture = vec2( aTexture.x , 1.-aTexture.y );" + "}");
	gl4.compileShader(shader2);
	var gl5 = this.gl;
	var shader3 = gl5.createShader(35632);
	gl5.shaderSource(shader3,"precision mediump float;" + "uniform sampler2D image;" + "varying vec2 texture;" + "void main(void) {" + "float bound =   step( texture.s, 1. ) *" + "step( texture.t, 1. ) *" + " ( 1. - step( texture.s, 0. ) ) * " + " ( 1. - step( texture.t, 0. ) );" + "gl_FragColor = bound * texture2D( image, vec2( texture.s, texture.t ) );" + "}");
	gl5.compileShader(shader3);
	var program1 = gl3.createProgram();
	gl3.attachShader(program1,shader2);
	gl3.attachShader(program1,shader3);
	gl3.linkProgram(program1);
	this.program1 = program1;
	this.render();
};
Test.__name__ = true;
Test.main = function() {
	justTriangles_Draw.drawTri = justTriangles_Triangle.drawTri;
	new Test();
};
Test.prototype = {
	drawVectorOutlines: function() {
		var ctx = new justTriangles_PathContext(1,1000,1,1);
		ctx.setColor(2,2);
		ctx.setThickness(20);
		ctx.lineType = justTriangles_LineType.TriangleJoinCurve;
		new justTriangles_SvgPath(ctx).parse(this.bird_d,1,1,3,3);
		ctx.render(4,false);
		ctx.setThickness(4);
		var y0 = 0.;
		var _g = 0;
		while(_g < 67) {
			++_g;
			ctx.moveTo(0.,y0);
			ctx.lineTo(2000.,y0);
			y0 += 30;
		}
		var x0 = 0.;
		var _g1 = 0;
		while(_g1 < 67) {
			++_g1;
			ctx.moveTo(x0,0.);
			ctx.lineTo(x0,2000.);
			x0 += 30;
		}
		ctx.render(4,false);
	}
	,createWebGl: function(width_,height_) {
		Test.canvas = window.document.createElement("canvas");
		Test.canvas.width = 1024;
		Test.canvas.height = 1024;
		var style = Test.canvas.style;
		style.paddingLeft = "0px";
		style.paddingTop = "0px";
		style.left = "0px";
		style.top = "0px";
		style.position = "absolute";
		window.document.body.appendChild(Test.canvas);
		return js_html__$CanvasElement_CanvasUtil.getContextWebGL(Test.canvas,{ "antialias" : true});
	}
	,createTriangleColors: function(triangles) {
		var tri;
		var count = 0;
		var _g1 = 0;
		var _g = triangles.length;
		while(_g1 < _g) {
			tri = triangles[_g1++];
			var colorA = this.rainbow[tri.colorA];
			var colorB = this.rainbow[tri.colorB];
			var colorC = this.rainbow[tri.colorC];
			this.vertices.push(tri.ax);
			this.vertices.push(tri.ay);
			this.vertices.push(tri.depth);
			this.vertices.push(tri.bx);
			this.vertices.push(tri.by);
			this.vertices.push(tri.depth);
			this.vertices.push(tri.cx);
			this.vertices.push(tri.cy);
			this.vertices.push(tri.depth);
			this.colors.push((colorA >> 16 & 255) / 255);
			this.colors.push((colorA >> 8 & 255) / 255);
			this.colors.push((colorA & 255) / 255);
			this.colors.push(.7);
			this.indices.push(count++);
			this.colors.push((colorB >> 16 & 255) / 255);
			this.colors.push((colorB >> 8 & 255) / 255);
			this.colors.push((colorB & 255) / 255);
			this.colors.push(.7);
			this.indices.push(count++);
			this.colors.push((colorC >> 16 & 255) / 255);
			this.colors.push((colorC >> 8 & 255) / 255);
			this.colors.push((colorC & 255) / 255);
			this.colors.push(.7);
			this.indices.push(count++);
		}
	}
	,setTriangleColors: function(triangles) {
		this.createTriangleColors(triangles);
		var gl = this.gl;
		var program = this.program0;
		var arr = this.vertices;
		gl.bindBuffer(34962,gl.createBuffer());
		gl.bufferData(34962,new Float32Array(arr),35044);
		var flo = gl.getAttribLocation(program,"pos");
		gl.vertexAttribPointer(flo,3,5126,false,0,0);
		gl.enableVertexAttribArray(flo);
		gl.bindBuffer(34962,null);
		var gl1 = this.gl;
		var indices = this.indices;
		gl1.bindBuffer(34963,gl1.createBuffer());
		gl1.bufferData(34963,new Uint16Array(indices),35044);
		gl1.bindBuffer(34963,null);
		var gl2 = this.gl;
		var program1 = this.program0;
		var arr1 = this.colors;
		gl2.bindBuffer(34962,gl2.createBuffer());
		gl2.bufferData(34962,new Float32Array(arr1),35044);
		var flo1 = gl2.getAttribLocation(program1,"color");
		gl2.vertexAttribPointer(flo1,4,5126,false,0,0);
		gl2.enableVertexAttribArray(flo1);
		gl2.bindBuffer(34962,null);
	}
	,creatingTriangles: function(triangles) {
		var tri;
		var count = 0;
		var _g1 = 0;
		var _g = triangles.length;
		while(_g1 < _g) {
			tri = triangles[_g1++];
			this.vertices.push(tri.ax - 0.5);
			this.texturePos.push(tri.ax / 2 + 0.25);
			this.vertices.push(-tri.ay + 0.5);
			this.texturePos.push(tri.ay / 2 + 0.25);
			this.vertices.push(tri.depth);
			this.vertices.push(tri.bx - 0.5);
			this.texturePos.push(tri.bx / 2 + 0.25);
			this.vertices.push(-tri.by + 0.5);
			this.texturePos.push(tri.by / 2 + 0.25);
			this.vertices.push(tri.depth);
			this.vertices.push(tri.cx - 0.5);
			this.texturePos.push(tri.cx / 2 + 0.25);
			this.vertices.push(-tri.cy + 0.5);
			this.texturePos.push(tri.cy / 2 + 0.25);
			this.vertices.push(tri.depth);
			var _g2 = 0;
			while(_g2 < 3) {
				++_g2;
				this.indices.push(count++);
			}
		}
	}
	,setTriangleTexture: function(triangles,texture) {
		this.creatingTriangles(triangles);
		var gl = this.gl;
		var program = this.program1;
		var arr = this.vertices;
		gl.bindBuffer(34962,gl.createBuffer());
		gl.bufferData(34962,new Float32Array(arr),35044);
		var flo = gl.getAttribLocation(program,"pos");
		gl.vertexAttribPointer(flo,3,5126,false,0,0);
		gl.enableVertexAttribArray(flo);
		gl.bindBuffer(34962,null);
		var gl1 = this.gl;
		var indices = this.indices;
		gl1.bindBuffer(34963,gl1.createBuffer());
		gl1.bufferData(34963,new Uint16Array(indices),35044);
		gl1.bindBuffer(34963,null);
		var gl2 = this.gl;
		var texturePos = this.texturePos;
		var texCoordLocation = gl2.getAttribLocation(this.program1,"aTexture");
		gl2.bindBuffer(34962,gl2.createBuffer());
		gl2.bufferData(34962,new Float32Array(texturePos),35044);
		gl2.enableVertexAttribArray(texCoordLocation);
		gl2.vertexAttribPointer(texCoordLocation,2,5126,false,0,0);
		gl2.activeTexture(33984);
		gl2.bindTexture(3553,texture);
		gl2.pixelStorei(37440,1);
		gl2.texParameteri(3553,10242,33071);
		gl2.texParameteri(3553,10243,33071);
		gl2.texParameteri(3553,10241,9728);
		gl2.texParameteri(3553,10240,9728);
	}
	,render: function() {
		var pos_x;
		var dim_y;
		var pos_x1;
		var dim_y1;
		var pos_x2;
		var pos_x3;
		this.gl.bindFramebuffer(36160,null);
		this.gl.useProgram(this.program0);
		var colors = this.col;
		var theta = -Math.PI / 8;
		if(colors.length != 0) {
			if(colors.length == 1) {
				colors.push(colors[0]);
			}
			var loops = colors.length - 1;
			var step = 2. / (colors.length - 1);
			var _g1 = 0;
			while(_g1 < loops) {
				var i = _g1++;
				pos_x3 = -1. + i * step;
				var colorID_ = colors[i];
				var colorID2_ = colors[i + 1];
				var A_ = { x : pos_x3, y : 1.};
				var B_ = { x : pos_x3 + step, y : 1.};
				var C_ = { x : pos_x3 + step, y : -1.};
				var D_ = { x : pos_x3, y : -1.};
				if(theta != 0) {
					var px = A_.x - 0.5;
					var py = A_.y - 0.5;
					var px2 = px * Math.cos(theta) - py * Math.sin(theta);
					py = py * Math.cos(theta) + px * Math.sin(theta);
					A_ = { x : px2 + 0.5, y : py + 0.5};
					var px1 = B_.x - 0.5;
					var py1 = B_.y - 0.5;
					var px21 = px1 * Math.cos(theta) - py1 * Math.sin(theta);
					py1 = py1 * Math.cos(theta) + px1 * Math.sin(theta);
					B_ = { x : px21 + 0.5, y : py1 + 0.5};
					var px3 = C_.x - 0.5;
					var py2 = C_.y - 0.5;
					var px22 = px3 * Math.cos(theta) - py2 * Math.sin(theta);
					py2 = py2 * Math.cos(theta) + px3 * Math.sin(theta);
					C_ = { x : px22 + 0.5, y : py2 + 0.5};
					var px4 = D_.x - 0.5;
					var py3 = D_.y - 0.5;
					var px23 = px4 * Math.cos(theta) - py3 * Math.sin(theta);
					py3 = py3 * Math.cos(theta) + px4 * Math.sin(theta);
					D_ = { x : px23 + 0.5, y : py3 + 0.5};
				}
				var this1 = new justTriangles_Triangle(10,false,A_,B_,D_,0,colorID_);
				if(this1.windingAdjusted) {
					this1.colorA = colorID_;
					this1.colorB = colorID_;
					this1.colorC = colorID2_;
				} else {
					this1.colorA = colorID_;
					this1.colorB = colorID2_;
					this1.colorC = colorID_;
				}
				justTriangles_Triangle.triangles.push(this1);
				var this2 = new justTriangles_Triangle(10,false,B_,C_,D_,0,colorID2_);
				if(this2.windingAdjusted) {
					this2.colorA = colorID2_;
					this2.colorB = colorID_;
					this2.colorC = colorID2_;
				} else {
					this2.colorA = colorID2_;
					this2.colorB = colorID2_;
					this2.colorC = colorID_;
				}
				justTriangles_Triangle.triangles.push(this2);
			}
		}
		var colors1 = this.col;
		var theta1 = Math.PI / 8;
		if(colors1.length != 0) {
			if(colors1.length == 1) {
				colors1.push(colors1[0]);
			}
			var loops1 = colors1.length - 1;
			var step1 = 2. / (colors1.length - 1);
			var _g11 = 0;
			while(_g11 < loops1) {
				var i1 = _g11++;
				pos_x2 = -1. + i1 * step1;
				var colorID_1 = colors1[i1];
				var colorID2_1 = colors1[i1 + 1];
				var A_1 = { x : pos_x2, y : 1.};
				var B_1 = { x : pos_x2 + step1, y : 1.};
				var C_1 = { x : pos_x2 + step1, y : -1.};
				var D_1 = { x : pos_x2, y : -1.};
				if(theta1 != 0) {
					var px5 = A_1.x - -0.5;
					var py4 = A_1.y - -0.5;
					var px24 = px5 * Math.cos(theta1) - py4 * Math.sin(theta1);
					py4 = py4 * Math.cos(theta1) + px5 * Math.sin(theta1);
					A_1 = { x : px24 + -0.5, y : py4 + -0.5};
					var px6 = B_1.x - -0.5;
					var py5 = B_1.y - -0.5;
					var px25 = px6 * Math.cos(theta1) - py5 * Math.sin(theta1);
					py5 = py5 * Math.cos(theta1) + px6 * Math.sin(theta1);
					B_1 = { x : px25 + -0.5, y : py5 + -0.5};
					var px7 = C_1.x - -0.5;
					var py6 = C_1.y - -0.5;
					var px26 = px7 * Math.cos(theta1) - py6 * Math.sin(theta1);
					py6 = py6 * Math.cos(theta1) + px7 * Math.sin(theta1);
					C_1 = { x : px26 + -0.5, y : py6 + -0.5};
					var px8 = D_1.x - -0.5;
					var py7 = D_1.y - -0.5;
					var px27 = px8 * Math.cos(theta1) - py7 * Math.sin(theta1);
					py7 = py7 * Math.cos(theta1) + px8 * Math.sin(theta1);
					D_1 = { x : px27 + -0.5, y : py7 + -0.5};
				}
				var this3 = new justTriangles_Triangle(10,false,A_1,B_1,D_1,0,colorID_1);
				if(this3.windingAdjusted) {
					this3.colorA = colorID_1;
					this3.colorB = colorID_1;
					this3.colorC = colorID2_1;
				} else {
					this3.colorA = colorID_1;
					this3.colorB = colorID2_1;
					this3.colorC = colorID_1;
				}
				justTriangles_Triangle.triangles.push(this3);
				var this4 = new justTriangles_Triangle(10,false,B_1,C_1,D_1,0,colorID2_1);
				if(this4.windingAdjusted) {
					this4.colorA = colorID2_1;
					this4.colorB = colorID_1;
					this4.colorC = colorID2_1;
				} else {
					this4.colorA = colorID2_1;
					this4.colorB = colorID2_1;
					this4.colorC = colorID_1;
				}
				justTriangles_Triangle.triangles.push(this4);
			}
		}
		var ctx = new justTriangles_PathContext(1,500,1,1);
		var x0 = ctx.s * (150. - ctx.dw + ctx.tx);
		var y0 = ctx.s * (150. - ctx.dw + ctx.ty);
		if(x0 < ctx.minX) {
			ctx.minX = x0;
		}
		if(x0 < ctx.minY) {
			ctx.minY = y0;
		}
		if(x0 > ctx.maxX) {
			ctx.maxX = x0;
		}
		if(y0 > ctx.maxY) {
			ctx.maxY = y0;
		}
		var x01 = ctx.s * (600. - ctx.dw + ctx.tx);
		var y01 = ctx.s * (300. - ctx.dw + ctx.ty);
		if(x01 < ctx.minX) {
			ctx.minX = x01;
		}
		if(x01 < ctx.minY) {
			ctx.minY = y01;
		}
		if(x01 > ctx.maxX) {
			ctx.maxX = x01;
		}
		if(y01 > ctx.maxY) {
			ctx.maxY = y01;
		}
		var left = x0 - 0.5;
		var top = y0 - 0.5;
		var wid = x01 - x0 - 0.5;
		var hi = y01 - y0 - 0.5;
		var colors2 = this.col2;
		if(colors2.length != 0) {
			var top1 = -top;
			if(colors2.length == 1) {
				colors2.push(colors2[0]);
			}
			var loops2 = colors2.length - 1;
			var step2 = wid / (colors2.length - 1);
			dim_y1 = -hi;
			var _g12 = 0;
			while(_g12 < loops2) {
				var i2 = _g12++;
				pos_x1 = left + i2 * step2;
				var colorID_2 = colors2[i2];
				var colorID2_2 = colors2[i2 + 1];
				var B_2 = { x : pos_x1 + step2, y : top1};
				var D_2 = { x : pos_x1, y : top1 + dim_y1};
				var this5 = new justTriangles_Triangle(10,false,{ x : pos_x1, y : top1},B_2,D_2,0,colorID_2);
				if(this5.windingAdjusted) {
					this5.colorA = colorID_2;
					this5.colorB = colorID_2;
					this5.colorC = colorID2_2;
				} else {
					this5.colorA = colorID_2;
					this5.colorB = colorID2_2;
					this5.colorC = colorID_2;
				}
				justTriangles_Triangle.triangles.push(this5);
				var this6 = new justTriangles_Triangle(10,false,B_2,{ x : pos_x1 + step2, y : top1 + dim_y1},D_2,0,colorID2_2);
				if(this6.windingAdjusted) {
					this6.colorA = colorID2_2;
					this6.colorB = colorID_2;
					this6.colorC = colorID2_2;
				} else {
					this6.colorA = colorID2_2;
					this6.colorB = colorID2_2;
					this6.colorC = colorID_2;
				}
				justTriangles_Triangle.triangles.push(this6);
			}
		}
		var colors3 = this.col2;
		var theta2 = -Math.PI / 4;
		var pivotX = left + wid / 2;
		var pivotY = -top - hi / 2;
		if(colors3.length != 0) {
			var top2 = -top;
			if(colors3.length == 1) {
				colors3.push(colors3[0]);
			}
			var loops3 = colors3.length - 1;
			var step3 = wid / (colors3.length - 1);
			dim_y = -hi;
			var _g13 = 0;
			while(_g13 < loops3) {
				var i3 = _g13++;
				pos_x = left + i3 * step3;
				var colorID_3 = colors3[i3];
				var colorID2_3 = colors3[i3 + 1];
				var A_2 = { x : pos_x, y : top2};
				var B_3 = { x : pos_x + step3, y : top2};
				var C_2 = { x : pos_x + step3, y : top2 + dim_y};
				var D_3 = { x : pos_x, y : top2 + dim_y};
				if(theta2 != 0) {
					var px9 = A_2.x - pivotX;
					var py8 = A_2.y - pivotY;
					var px28 = px9 * Math.cos(theta2) - py8 * Math.sin(theta2);
					py8 = py8 * Math.cos(theta2) + px9 * Math.sin(theta2);
					A_2 = { x : px28 + pivotX, y : py8 + pivotY};
					var px10 = B_3.x - pivotX;
					var py9 = B_3.y - pivotY;
					var px29 = px10 * Math.cos(theta2) - py9 * Math.sin(theta2);
					py9 = py9 * Math.cos(theta2) + px10 * Math.sin(theta2);
					B_3 = { x : px29 + pivotX, y : py9 + pivotY};
					var px11 = C_2.x - pivotX;
					var py10 = C_2.y - pivotY;
					var px210 = px11 * Math.cos(theta2) - py10 * Math.sin(theta2);
					py10 = py10 * Math.cos(theta2) + px11 * Math.sin(theta2);
					C_2 = { x : px210 + pivotX, y : py10 + pivotY};
					var px12 = D_3.x - pivotX;
					var py11 = D_3.y - pivotY;
					var px211 = px12 * Math.cos(theta2) - py11 * Math.sin(theta2);
					py11 = py11 * Math.cos(theta2) + px12 * Math.sin(theta2);
					D_3 = { x : px211 + pivotX, y : py11 + pivotY};
				}
				var this7 = new justTriangles_Triangle(10,false,A_2,B_3,D_3,0,colorID_3);
				if(this7.windingAdjusted) {
					this7.colorA = colorID_3;
					this7.colorB = colorID_3;
					this7.colorC = colorID2_3;
				} else {
					this7.colorA = colorID_3;
					this7.colorB = colorID2_3;
					this7.colorC = colorID_3;
				}
				justTriangles_Triangle.triangles.push(this7);
				var this8 = new justTriangles_Triangle(10,false,B_3,C_2,D_3,0,colorID2_3);
				if(this8.windingAdjusted) {
					this8.colorA = colorID2_3;
					this8.colorB = colorID_3;
					this8.colorC = colorID2_3;
				} else {
					this8.colorA = colorID2_3;
					this8.colorB = colorID2_3;
					this8.colorC = colorID_3;
				}
				justTriangles_Triangle.triangles.push(this8);
			}
		}
		this.setTriangleColors(justTriangles_Triangle.triangles);
		var gl = this.gl;
		Test.texture = gl.createTexture();
		gl.bindTexture(3553,Test.texture);
		gl.texImage2D(3553,0,6408,Test.canvas.width,Test.canvas.height,0,6408,5121,null);
		Test.framebuffer = gl.createFramebuffer();
		gl.bindFramebuffer(36160,Test.framebuffer);
		gl.framebufferTexture2D(36160,36064,3553,Test.texture,0);
		this.drawing(this.program0,Test.canvas.width,Test.canvas.height);
		justTriangles_Triangle.triangles = [];
		this.gl.bindFramebuffer(36160,null);
		this.indices = [];
		this.vertices = [];
		this.colors = [];
		this.drawVectorOutlines();
		this.gl.useProgram(this.program1);
		this.setTriangleTexture(justTriangles_Triangle.triangles,Test.texture);
		this.drawing(this.program1,Test.canvas.width,Test.canvas.height);
		console.log(justTriangles_Triangle.triangles.length);
	}
	,drawing: function(prog,width_,height_) {
		this.gl.clearColor(0.5,0.0,0.5,0.9);
		this.gl.enable(2929);
		this.gl.clear(16384);
		this.gl.viewport(0,0,width_,height_);
		this.modelViewProjection = new khaMath_Matrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
		var modelViewProjectionID = this.gl.getUniformLocation(prog,"modelViewProjection");
		var m = this.modelViewProjection;
		this.matrix32Array.set([m._00,m._10,m._20,m._30,m._01,m._11,m._21,m._31,m._02,m._12,m._22,m._32,m._03,m._13,m._23,m._33]);
		this.gl.uniformMatrix4fv(modelViewProjectionID,false,this.matrix32Array);
		this.gl.drawArrays(4,0,this.indices.length);
	}
	,__class__: Test
};
var haxe_io_FPHelper = function() { };
haxe_io_FPHelper.__name__ = true;
haxe_io_FPHelper.i32ToFloat = function(i) {
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) {
		return 0.0;
	}
	return (1 - (i >>> 31 << 1)) * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) {
		return 0;
	}
	var af = f < 0 ? -f : f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) {
		exp = -127;
	} else if(exp > 128) {
		exp = 128;
	}
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608);
	if(sig == 8388608 && exp < 128) {
		sig = 0;
		++exp;
	}
	return (f < 0 ? -2147483648 : 0) | exp + 127 << 23 | sig;
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = intf[_g1++];
			if(i == cl || js_Boot.__interfLoop(i,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_html__$CanvasElement_CanvasUtil = function() { };
js_html__$CanvasElement_CanvasUtil.__name__ = true;
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var _g = 0;
	var _g1 = ["webgl","experimental-webgl"];
	while(_g < _g1.length) {
		var name = _g1[_g];
		++_g;
		var ctx = canvas.getContext(name,attribs);
		if(ctx != null) {
			return ctx;
		}
	}
	return null;
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) this.a[_g1++] = 0;
		this.byteLength = len;
	}
};
js_html_compat_ArrayBuffer.__name__ = true;
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	new Uint8Array(result).set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_Float32Array = function() { };
js_html_compat_Float32Array.__name__ = true;
js_html_compat_Float32Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		var _g2 = [];
		var _g21 = 0;
		var _g11 = arr.length << 2;
		while(_g21 < _g11) {
			var i1 = _g21++;
			_g2.push(0);
		}
		arr.buffer = new js_html_compat_ArrayBuffer(_g2);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset >> 2;
		}
		arr = [];
		var _g12 = 0;
		var _g3 = length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var val = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			arr.push(haxe_io_FPHelper.i32ToFloat(val));
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		var buffer1 = [];
		var _g4 = 0;
		while(_g4 < arr.length) {
			var f = arr[_g4];
			++_g4;
			var i3 = haxe_io_FPHelper.floatToI32(f);
			buffer1.push(i3 & 255);
			buffer1.push(i3 >> 8 & 255);
			buffer1.push(i3 >> 16 & 255);
			buffer1.push(i3 >>> 24);
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(buffer1);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Float32Array._subarray;
	arr.set = js_html_compat_Float32Array._set;
	return arr;
};
js_html_compat_Float32Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Float32Array._subarray = function(start,end) {
	var a = js_html_compat_Float32Array._new(this.slice(start,end));
	a.byteOffset = start * 4;
	return a;
};
var js_html_compat_Uint8Array = function() { };
js_html_compat_Uint8Array.__name__ = true;
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
var justTriangles_Draw = function() {
};
justTriangles_Draw.__name__ = true;
justTriangles_Draw.set_thick = function(val) {
	if(val < 0) {
		val = 0.00001;
	}
	justTriangles_Draw.thickness = val / 1024;
	return justTriangles_Draw.thickness;
};
justTriangles_Draw.get_thick = function() {
	return justTriangles_Draw.thickness;
};
justTriangles_Draw.dist = function(p0,p1) {
	var dx = p0.x - p1.x;
	var dy = p0.y - p1.y;
	return dx * dx + dy * dy;
};
justTriangles_Draw.prototype = {
	create2Lines: function(p0_,p1_,p2_,thick) {
		this.p0 = p0_;
		this.p1 = p1_;
		this.p2 = p2_;
		this.b2 = justTriangles_Draw.dist(this.p0,this.p1);
		this.c2 = justTriangles_Draw.dist(this.p1,this.p2);
		this.a2 = justTriangles_Draw.dist(this.p0,this.p2);
		this.b = Math.sqrt(this.b2);
		this.c = Math.sqrt(this.c2);
		this.a = Math.sqrt(this.a2);
		this.cosA = (this.b2 + this.c2 - this.a2) / (2 * this.b * this.c);
		if(this.cosA > 1) {
			this.cosA = 1;
		} else if(this.cosA < -1) {
			this.cosA = -1;
		}
		this.angleA = Math.acos(this.cosA);
		this.halfA = this.angleA / 2;
		this._thick = thick;
		this.beta = Math.PI / 2 - this.halfA;
		this.r = this._thick / 2 * Math.cos(this.beta);
		this._theta = this.theta(this.p0,this.p1);
		if(this._theta > 0) {
			if(this.halfA < 0) {
				this.angle2 = this._theta + this.halfA + Math.PI / 2;
				this.angle1 = this._theta - this.halfA;
			} else {
				this.angle1 = this._theta + this.halfA - Math.PI;
				this.angle2 = this._theta + this.halfA;
			}
		} else if(this.halfA > 0) {
			this.angle1 = this._theta + this.halfA - Math.PI;
			this.angle2 = this._theta + this.halfA;
		} else {
			this.angle2 = this._theta + this.halfA + Math.PI / 2;
			this.angle1 = this._theta - this.halfA;
		}
		if(this.p3old != null) {
			this.p3old2 = this.p3old;
		}
		if(this.p4old != null) {
			this.p4old2 = this.p4old;
		}
		if(this.p3 != null) {
			this.p3old = this.p3;
		}
		if(this.p4 != null) {
			this.p4old = this.p4;
		}
		this.p3 = { x : this.p1.x + this.r * Math.cos(this.angle1), y : this.p1.y + this.r * Math.sin(this.angle1)};
		this.p4 = { x : this.p1.x + this.r * Math.cos(this.angle2), y : this.p1.y + this.r * Math.sin(this.angle2)};
	}
	,rebuildAsPoly: function(p2_) {
		this.p0 = this.p1;
		this.p1 = this.p2;
		this.p2 = p2_;
		this._theta = this.theta(this.p0,this.p1);
		if(this._theta > 0) {
			if(this.halfA < 0) {
				this.angle2 = this._theta + this.halfA + Math.PI / 2;
				this.angle1 = this._theta - this.halfA;
			} else {
				this.angle1 = this._theta + this.halfA - Math.PI;
				this.angle2 = this._theta + this.halfA;
			}
		} else if(this.halfA > 0) {
			this.angle1 = this._theta + this.halfA - Math.PI;
			this.angle2 = this._theta + this.halfA;
		} else {
			this.angle2 = this._theta + this.halfA + Math.PI / 2;
			this.angle1 = this._theta - this.halfA;
		}
		if(this.p3old != null) {
			this.p3old2 = this.p3old;
		}
		if(this.p4old != null) {
			this.p4old2 = this.p4old;
		}
		if(this.p3 != null) {
			this.p3old = this.p3;
		}
		if(this.p4 != null) {
			this.p4old = this.p4;
		}
		this.p3 = { x : this.p1.x + this.r * Math.cos(this.angle1), y : this.p1.y + this.r * Math.sin(this.angle1)};
		this.p4 = { x : this.p1.x + this.r * Math.cos(this.angle2), y : this.p1.y + this.r * Math.sin(this.angle2)};
	}
	,theta: function(p0,p1) {
		return Math.atan2(p0.y - p1.y,p0.x - p1.x);
	}
	,__class__: justTriangles_Draw
};
var justTriangles_IPathContext = function() { };
justTriangles_IPathContext.__name__ = true;
justTriangles_IPathContext.prototype = {
	__class__: justTriangles_IPathContext
};
var justTriangles_LineType = { __ename__ : true, __constructs__ : ["TriangleJoinCurve","TriangleJoinStraight","Poly","Curves","Round","Isolated","Quad"] };
justTriangles_LineType.TriangleJoinCurve = ["TriangleJoinCurve",0];
justTriangles_LineType.TriangleJoinCurve.toString = $estr;
justTriangles_LineType.TriangleJoinCurve.__enum__ = justTriangles_LineType;
justTriangles_LineType.TriangleJoinStraight = ["TriangleJoinStraight",1];
justTriangles_LineType.TriangleJoinStraight.toString = $estr;
justTriangles_LineType.TriangleJoinStraight.__enum__ = justTriangles_LineType;
justTriangles_LineType.Poly = ["Poly",2];
justTriangles_LineType.Poly.toString = $estr;
justTriangles_LineType.Poly.__enum__ = justTriangles_LineType;
justTriangles_LineType.Curves = ["Curves",3];
justTriangles_LineType.Curves.toString = $estr;
justTriangles_LineType.Curves.__enum__ = justTriangles_LineType;
justTriangles_LineType.Round = ["Round",4];
justTriangles_LineType.Round.toString = $estr;
justTriangles_LineType.Round.__enum__ = justTriangles_LineType;
justTriangles_LineType.Isolated = ["Isolated",5];
justTriangles_LineType.Isolated.toString = $estr;
justTriangles_LineType.Isolated.__enum__ = justTriangles_LineType;
justTriangles_LineType.Quad = ["Quad",6];
justTriangles_LineType.Quad.toString = $estr;
justTriangles_LineType.Quad.__enum__ = justTriangles_LineType;
var justTriangles_PathContext = function(id_,width_,tx_,ty_) {
	if(ty_ == null) {
		ty_ = 0;
	}
	if(tx_ == null) {
		tx_ = 0;
	}
	this.lineType = justTriangles_LineType.TriangleJoinCurve;
	this.dirty = true;
	this.fill = false;
	this.id = id_;
	this.dw = width_ / 2;
	this.s = 1 / width_;
	this.tx = tx_;
	this.ty = ty_;
	this.minX = 1;
	this.maxX = -1;
	this.minY = 1;
	this.maxY = -1;
	this.lineColors = [];
	this.fillColors = [];
	this.thicks = [];
	this.lineColor = justTriangles_Draw.colorId;
	this.fillColor = justTriangles_Draw.colorId;
	this.thick = justTriangles_Draw.get_thick();
	this.ppp = [];
	this.moveTo(this.dw,this.dw);
};
justTriangles_PathContext.__name__ = true;
justTriangles_PathContext.__interfaces__ = [justTriangles_IPathContext];
justTriangles_PathContext.prototype = {
	setColor: function(lineColor_,fillColor_) {
		if(fillColor_ == null) {
			fillColor_ = -1;
		}
		if(fillColor_ != -1) {
			this.fillColor = fillColor_;
		}
		this.lineColor = lineColor_;
	}
	,setThickness: function(thick_) {
		this.thick = thick_;
		return this.thick;
	}
	,moveTo: function(x,y) {
		this.dirty = true;
		var x0 = this.s * (x - this.dw + this.tx);
		var y0 = this.s * (y - this.dw + this.ty);
		if(x0 < this.minX) {
			this.minX = x0;
		}
		if(x0 < this.minY) {
			this.minY = y0;
		}
		if(x0 > this.maxX) {
			this.maxX = x0;
		}
		if(y0 > this.maxY) {
			this.maxY = y0;
		}
		this.p0 = { x : x0, y : y0};
		if(this.pp != null) {
			if(this.pp.length == 1) {
				this.ppp.pop();
				this.lineColors.pop();
				this.fillColors.pop();
				this.thicks.pop();
			}
		}
		this.pp = [];
		var pl = this.ppp.length;
		this.lineColors[pl] = this.lineColor;
		this.fillColors[pl] = this.fillColor;
		this.thicks[pl] = this.thick;
		this.pp.push(this.p0);
		this.ppp.push(this.pp);
	}
	,lineTo: function(x,y) {
		var x0 = this.s * (x - this.dw + this.tx);
		var y0 = this.s * (y - this.dw + this.ty);
		if(x0 < this.minX) {
			this.minX = x0;
		}
		if(x0 < this.minY) {
			this.minY = y0;
		}
		if(x0 > this.maxX) {
			this.maxX = x0;
		}
		if(y0 > this.maxY) {
			this.maxY = y0;
		}
		var p1 = { x : x0, y : y0};
		this.pp.push(p1);
		this.p0 = p1;
	}
	,quadTo: function(x1,y1,x2,y2) {
		var x0 = this.s * (x1 - this.dw + this.tx);
		var y0 = this.s * (y1 - this.dw + this.ty);
		if(x0 < this.minX) {
			this.minX = x0;
		}
		if(x0 < this.minY) {
			this.minY = y0;
		}
		if(x0 > this.maxX) {
			this.maxX = x0;
		}
		if(y0 > this.maxY) {
			this.maxY = y0;
		}
		var p1 = { x : x0, y : y0};
		var x01 = this.s * (x2 - this.dw + this.tx);
		var y01 = this.s * (y2 - this.dw + this.ty);
		if(x01 < this.minX) {
			this.minX = x01;
		}
		if(x01 < this.minY) {
			this.minY = y01;
		}
		if(x01 > this.maxX) {
			this.maxX = x01;
		}
		if(y01 > this.maxY) {
			this.maxY = y01;
		}
		var p2 = { x : x01, y : y01};
		var p0 = this.p0;
		var p = [];
		var x = p0.x - p1.x;
		var y = p0.y - p1.y;
		var x3 = p1.x - p2.x;
		var y3 = p1.y - p2.y;
		var approxDistance = Math.sqrt(x * x + y * y) + Math.sqrt(x3 * x3 + y3 * y3);
		var v;
		if(approxDistance == 0) {
			approxDistance = 0.000001;
		}
		var step = Math.min(1 / (approxDistance * 0.707),justTriangles_ShapePoints.quadStep);
		var t = 0.0;
		p.push(p0);
		t = step;
		while(t < 1) {
			var u = 1 - t;
			var u1 = 1 - t;
			v = { x : Math.pow(u,2) * p0.x + 2 * u * t * p1.x + Math.pow(t,2) * p2.x, y : Math.pow(u1,2) * p0.y + 2 * u1 * t * p1.y + Math.pow(t,2) * p2.y};
			p.push({ x : v.x, y : v.y});
			t += step;
		}
		p.push(p2);
		var plen = this.pp.length;
		var _g1 = 1;
		var _g = p.length;
		while(_g1 < _g) this.pp[plen++] = p[_g1++];
		this.p0 = p2;
	}
	,curveTo: function(x1,y1,x2,y2,x3,y3) {
		var x0 = this.s * (x1 - this.dw + this.tx);
		var y0 = this.s * (y1 - this.dw + this.ty);
		if(x0 < this.minX) {
			this.minX = x0;
		}
		if(x0 < this.minY) {
			this.minY = y0;
		}
		if(x0 > this.maxX) {
			this.maxX = x0;
		}
		if(y0 > this.maxY) {
			this.maxY = y0;
		}
		var p1 = { x : x0, y : y0};
		var x01 = this.s * (x2 - this.dw + this.tx);
		var y01 = this.s * (y2 - this.dw + this.ty);
		if(x01 < this.minX) {
			this.minX = x01;
		}
		if(x01 < this.minY) {
			this.minY = y01;
		}
		if(x01 > this.maxX) {
			this.maxX = x01;
		}
		if(y01 > this.maxY) {
			this.maxY = y01;
		}
		var p2 = { x : x01, y : y01};
		var x02 = this.s * (x3 - this.dw + this.tx);
		var y02 = this.s * (y3 - this.dw + this.ty);
		if(x02 < this.minX) {
			this.minX = x02;
		}
		if(x02 < this.minY) {
			this.minY = y02;
		}
		if(x02 > this.maxX) {
			this.maxX = x02;
		}
		if(y02 > this.maxY) {
			this.maxY = y02;
		}
		var p3 = { x : x02, y : y02};
		var p0 = this.p0;
		var p = [];
		var x = p0.x - p1.x;
		var y = p0.y - p1.y;
		var x4 = p1.x - p2.x;
		var y4 = p1.y - p2.y;
		var x5 = p2.x - p3.x;
		var y5 = p2.y - p3.y;
		var approxDistance = Math.sqrt(x * x + y * y) + Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5);
		var v;
		if(approxDistance == 0) {
			approxDistance = 0.000001;
		}
		var step = Math.min(1 / (approxDistance * 0.707),justTriangles_ShapePoints.cubicStep);
		var t = 0.0;
		v = { x : Math.pow(1.,3) * p0.x + 3 * Math.pow(1.,2) * 0.0 * p1.x + 3. * Math.pow(0.0,2) * p2.x + Math.pow(0.0,3) * p3.x, y : Math.pow(1.,3) * p0.y + 3 * Math.pow(1.,2) * 0.0 * p1.y + 3. * Math.pow(0.0,2) * p2.y + Math.pow(0.0,3) * p3.y};
		p.push({ x : v.x, y : v.y});
		t = step;
		while(t < 1) {
			var u = 1 - t;
			var u1 = 1 - t;
			v = { x : Math.pow(u,3) * p0.x + 3 * Math.pow(u,2) * t * p1.x + 3 * u * Math.pow(t,2) * p2.x + Math.pow(t,3) * p3.x, y : Math.pow(u1,3) * p0.y + 3 * Math.pow(u1,2) * t * p1.y + 3 * u1 * Math.pow(t,2) * p2.y + Math.pow(t,3) * p3.y};
			p.push({ x : v.x, y : v.y});
			t += step;
		}
		v = { x : Math.pow(0.,3) * p0.x + 3 * Math.pow(0.,2) * p1.x + 0. * Math.pow(1.0,2) * p2.x + Math.pow(1.0,3) * p3.x, y : Math.pow(0.,3) * p0.y + 3 * Math.pow(0.,2) * p1.y + 0. * Math.pow(1.0,2) * p2.y + Math.pow(1.0,3) * p3.y};
		p.push({ x : v.x, y : v.y});
		var plen = this.pp.length;
		var _g1 = 1;
		var _g = p.length;
		while(_g1 < _g) this.pp[plen++] = p[_g1++];
		this.p0 = p3;
	}
	,fillTriangles: function() {
		var tri_c;
		var tri_b;
		var tri_a;
		var p;
		var j = 0;
		var _g = 0;
		var _g1 = this.ppp_;
		while(_g < _g1.length) {
			var pp0 = _g1[_g];
			++_g;
			var poly = [];
			var _g3 = 0;
			var _g2 = pp0.length;
			while(_g3 < _g2) {
				p = pp0[_g3++];
				poly.push(p.x);
				poly.push(p.y);
			}
			justTriangles_Draw.colorId = this.fillColors[j];
			var n = poly.length >> 1;
			var tgs;
			if(n < 3) {
				tgs = [];
			} else {
				var tgs1 = [];
				var avl = [];
				var _g11 = 0;
				while(_g11 < n) avl.push(_g11++);
				var i = 0;
				var al = n;
				var i0;
				var i1;
				var i2;
				var ax;
				var ay;
				var bx;
				var by;
				var cx;
				var cy;
				var earFound;
				while(al > 3) {
					i0 = avl[i % al];
					i1 = avl[(i + 1) % al];
					i2 = avl[(i + 2) % al];
					ax = poly[2 * i0];
					ay = poly[2 * i0 + 1];
					bx = poly[2 * i1];
					by = poly[2 * i1 + 1];
					cx = poly[2 * i2];
					cy = poly[2 * i2 + 1];
					earFound = false;
					if((ay - by) * (cx - bx) + (bx - ax) * (cy - by) >= 0) {
						earFound = true;
						var _g12 = 0;
						var _g4 = al;
						while(_g12 < _g4) {
							var vi = avl[_g12++];
							if(vi == i0 || vi == i1 || vi == i2) {
								continue;
							}
							var v0x = cx - ax;
							var v0y = cy - ay;
							var v1x = bx - ax;
							var v1y = by - ay;
							var v2x = poly[2 * vi] - ax;
							var v2y = poly[2 * vi + 1] - ay;
							var dot00 = v0x * v0x + v0y * v0y;
							var dot01 = v0x * v1x + v0y * v1y;
							var dot02 = v0x * v2x + v0y * v2y;
							var dot11 = v1x * v1x + v1y * v1y;
							var dot12 = v1x * v2x + v1y * v2y;
							var invDenom = 1 / (dot00 * dot11 - dot01 * dot01);
							var u = (dot11 * dot02 - dot01 * dot12) * invDenom;
							var v = (dot00 * dot12 - dot01 * dot02) * invDenom;
							if(u >= 0 && v >= 0 && u + v < 1) {
								earFound = false;
								break;
							}
						}
					}
					if(earFound) {
						tgs1.push(i0);
						tgs1.push(i1);
						tgs1.push(i2);
						avl.splice((i + 1) % al,1);
						--al;
						i = 0;
					} else if(i++ > 3 * al) {
						break;
					}
				}
				tgs1.push(avl[0]);
				tgs1.push(avl[1]);
				tgs1.push(avl[2]);
				tgs = tgs1;
			}
			var triples = justTriangles__$PolyK_ArrayTriple_$Impl_$._new(tgs);
			var _g5 = 0;
			while(_g5 < (triples.length / 3 | 0)) {
				++_g5;
				var n1 = poly.length >> 1;
				var tgs2;
				if(n1 < 3) {
					tgs2 = [];
				} else {
					var tgs3 = [];
					var avl1 = [];
					var _g13 = 0;
					while(_g13 < n1) avl1.push(_g13++);
					var i3 = 0;
					var al1 = n1;
					var i01;
					var i11;
					var i21;
					var ax1;
					var ay1;
					var bx1;
					var by1;
					var cx1;
					var cy1;
					var earFound1;
					while(al1 > 3) {
						i01 = avl1[i3 % al1];
						i11 = avl1[(i3 + 1) % al1];
						i21 = avl1[(i3 + 2) % al1];
						ax1 = poly[2 * i01];
						ay1 = poly[2 * i01 + 1];
						bx1 = poly[2 * i11];
						by1 = poly[2 * i11 + 1];
						cx1 = poly[2 * i21];
						cy1 = poly[2 * i21 + 1];
						earFound1 = false;
						if((ay1 - by1) * (cx1 - bx1) + (bx1 - ax1) * (cy1 - by1) >= 0) {
							earFound1 = true;
							var _g14 = 0;
							var _g6 = al1;
							while(_g14 < _g6) {
								var vi1 = avl1[_g14++];
								if(vi1 == i01 || vi1 == i11 || vi1 == i21) {
									continue;
								}
								var v0x1 = cx1 - ax1;
								var v0y1 = cy1 - ay1;
								var v1x1 = bx1 - ax1;
								var v1y1 = by1 - ay1;
								var v2x1 = poly[2 * vi1] - ax1;
								var v2y1 = poly[2 * vi1 + 1] - ay1;
								var dot001 = v0x1 * v0x1 + v0y1 * v0y1;
								var dot011 = v0x1 * v1x1 + v0y1 * v1y1;
								var dot021 = v0x1 * v2x1 + v0y1 * v2y1;
								var dot111 = v1x1 * v1x1 + v1y1 * v1y1;
								var dot121 = v1x1 * v2x1 + v1y1 * v2y1;
								var invDenom1 = 1 / (dot001 * dot111 - dot011 * dot011);
								var u1 = (dot111 * dot021 - dot011 * dot121) * invDenom1;
								var v1 = (dot001 * dot121 - dot011 * dot021) * invDenom1;
								if(u1 >= 0 && v1 >= 0 && u1 + v1 < 1) {
									earFound1 = false;
									break;
								}
							}
						}
						if(earFound1) {
							tgs3.push(i01);
							tgs3.push(i11);
							tgs3.push(i21);
							avl1.splice((i3 + 1) % al1,1);
							--al1;
							i3 = 0;
						} else if(i3++ > 3 * al1) {
							break;
						}
					}
					tgs3.push(avl1[0]);
					tgs3.push(avl1[1]);
					tgs3.push(avl1[2]);
					tgs2 = tgs3;
				}
				var triples1 = justTriangles__$PolyK_ArrayTriple_$Impl_$._new(tgs2);
				var a;
				var b;
				var c;
				var i4;
				var _g15 = 0;
				while(_g15 < (triples1.length / 3 | 0)) {
					var i5 = _g15 * 3 | 0;
					tri_a = triples1[i5];
					tri_b = triples1[i5 + 1];
					tri_c = triples1[i5 + 2];
					++_g15;
					i4 = tri_a * 2 | 0;
					a = { x : poly[i4], y : poly[i4 + 1]};
					i4 = tri_b * 2 | 0;
					b = { x : poly[i4], y : poly[i4 + 1]};
					i4 = tri_c * 2 | 0;
					c = { x : poly[i4], y : poly[i4 + 1]};
					justTriangles_Draw.drawTri(this.id,false,a,b,c,justTriangles_Draw.colorId);
				}
			}
			++j;
		}
	}
	,render: function(thick_,outline) {
		if(outline == null) {
			outline = true;
		}
		if(this.dirty) {
			var p;
			if(this.ppp_ == null) {
				this.ppp_ = [];
			}
			var plen = this.ppp.length;
			var pp0 = this.ppp[0];
			var _g1 = this.ppp_.length;
			while(_g1 < plen) {
				var i = _g1++;
				pp0 = this.ppp[i];
				p = pp0.slice();
				p.reverse();
				this.ppp_[i] = p;
			}
			this.dirty = false;
		}
		if(this.fill) {
			this.fillTriangles();
		}
		var j = 0;
		var _g = 0;
		var _g11 = this.ppp_;
		while(_g < _g11.length) {
			var pp01 = _g11[_g];
			++_g;
			switch(this.lineType[1]) {
			case 0:
				var draw = new justTriangles_Draw();
				justTriangles_Draw.colorId = this.lineColors[j];
				justTriangles_Draw.set_thick(this.thicks[j]);
				var _g3 = 0;
				var _g2 = pp01.length;
				while(_g3 < _g2) {
					var i1 = _g3++;
					if(i1 % 1 == 0 && i1 < pp01.length - 1) {
						var id = this.id;
						var p0_ = pp01[i1];
						var p1_ = pp01[i1 + 1];
						var thick = this.thick / 800;
						var oldAngle = draw.p3 != null ? draw.angle1 : null;
						draw.p0 = p1_;
						draw.p1 = p0_;
						draw.halfA = Math.PI / 2;
						draw._thick = thick;
						draw.beta = Math.PI / 2 - draw.halfA;
						draw.r = draw._thick / 2 * Math.cos(draw.beta);
						draw._theta = draw.theta(draw.p0,draw.p1);
						if(draw._theta > 0) {
							if(draw.halfA < 0) {
								draw.angle2 = draw._theta + draw.halfA + Math.PI / 2;
								draw.angle1 = draw._theta - draw.halfA;
							} else {
								draw.angle1 = draw._theta + draw.halfA - Math.PI;
								draw.angle2 = draw._theta + draw.halfA;
							}
						} else if(draw.halfA > 0) {
							draw.angle1 = draw._theta + draw.halfA - Math.PI;
							draw.angle2 = draw._theta + draw.halfA;
						} else {
							draw.angle2 = draw._theta + draw.halfA + Math.PI / 2;
							draw.angle1 = draw._theta - draw.halfA;
						}
						if(draw.p3old != null) {
							draw.p3old2 = draw.p3old;
						}
						if(draw.p4old != null) {
							draw.p4old2 = draw.p4old;
						}
						if(draw.p3 != null) {
							draw.p3old = draw.p3;
						}
						if(draw.p4 != null) {
							draw.p4old = draw.p4;
						}
						draw.p3 = { x : draw.p1.x + draw.r * Math.cos(draw.angle1), y : draw.p1.y + draw.r * Math.sin(draw.angle1)};
						draw.p4 = { x : draw.p1.x + draw.r * Math.cos(draw.angle2), y : draw.p1.y + draw.r * Math.sin(draw.angle2)};
						var q0 = { x : draw.p3.x, y : draw.p3.y};
						var q1 = { x : draw.p4.x, y : draw.p4.y};
						draw.p0 = p0_;
						draw.p1 = p1_;
						draw._theta = draw.theta(draw.p0,draw.p1);
						if(draw._theta > 0) {
							if(draw.halfA < 0) {
								draw.angle2 = draw._theta + draw.halfA + Math.PI / 2;
								draw.angle1 = draw._theta - draw.halfA;
							} else {
								draw.angle1 = draw._theta + draw.halfA - Math.PI;
								draw.angle2 = draw._theta + draw.halfA;
							}
						} else if(draw.halfA > 0) {
							draw.angle1 = draw._theta + draw.halfA - Math.PI;
							draw.angle2 = draw._theta + draw.halfA;
						} else {
							draw.angle2 = draw._theta + draw.halfA + Math.PI / 2;
							draw.angle1 = draw._theta - draw.halfA;
						}
						if(draw.p3old != null) {
							draw.p3old2 = draw.p3old;
						}
						if(draw.p4old != null) {
							draw.p4old2 = draw.p4old;
						}
						if(draw.p3 != null) {
							draw.p3old = draw.p3;
						}
						if(draw.p4 != null) {
							draw.p4old = draw.p4;
						}
						draw.p3 = { x : draw.p1.x + draw.r * Math.cos(draw.angle1), y : draw.p1.y + draw.r * Math.sin(draw.angle1)};
						draw.p4 = { x : draw.p1.x + draw.r * Math.cos(draw.angle2), y : draw.p1.y + draw.r * Math.sin(draw.angle2)};
						if(draw.p3old2 != null) {
							var clockWise = justTriangles_Draw.dist(draw.p3old2,p1_) > justTriangles_Draw.dist(draw.p4old2,p1_);
							if(oldAngle != null) {
								var dif = Math.abs(draw.angle1 - oldAngle);
								if(dif > 0.1) {
									var oldThickness = justTriangles_Draw.thickness;
									justTriangles_Draw.thickness = thick / 2;
									if(clockWise) {
										var dx = p0_.x;
										var dy = p0_.y;
										var radius = thick / 4;
										var start = draw.angle1;
										var p1 = [];
										var angle = 0;
										var angleInc = Math.PI * 2 / 240;
										var nextAngle;
										if(dif < 0) {
											var i2 = -1;
											while(true) {
												angle = i2 * angleInc;
												--i2;
												nextAngle = angle + start;
												if(angle <= dif) {
													break;
												}
												p1.push({ x : dx + radius * Math.cos(nextAngle), y : dy + radius * Math.sin(nextAngle)});
											}
										} else {
											var i3 = -1;
											while(true) {
												angle = i3 * angleInc;
												++i3;
												nextAngle = angle + start;
												if(angle >= dif + angleInc) {
													break;
												}
												p1.push({ x : dx + radius * Math.cos(nextAngle), y : dy + radius * Math.sin(nextAngle)});
											}
											p1.reverse();
										}
										justTriangles_Draw.q0 = p1[0];
										justTriangles_Draw.q1 = p1[0];
										var draw1 = new justTriangles_Draw();
										draw1.create2Lines(p1[0],p1[1],p1[2],justTriangles_Draw.thickness);
										justTriangles_Draw.q0 = draw1.p3;
										justTriangles_Draw.q1 = draw1.p4;
										var _g12 = 1;
										var _g4 = p1.length - 2;
										while(_g12 < _g4) {
											draw1.rebuildAsPoly(p1[_g12++ + 2]);
											var q3 = draw1.p3;
											justTriangles_Draw.drawTri(id,true,justTriangles_Draw.q0,q3,p0_,justTriangles_Draw.colorId);
											justTriangles_Draw.q0 = q3;
										}
									} else {
										var dx1 = p0_.x;
										var dy1 = p0_.y;
										var radius1 = thick / 4;
										var start1 = draw.angle2;
										var dA = -dif;
										var p2 = [];
										var angle1 = 0;
										var angleInc1 = Math.PI * 2 / 240;
										var nextAngle1;
										if(dA < 0) {
											var i4 = -1;
											while(true) {
												angle1 = i4 * angleInc1;
												--i4;
												nextAngle1 = angle1 + start1;
												if(angle1 <= dA) {
													break;
												}
												p2.push({ x : dx1 + radius1 * Math.cos(nextAngle1), y : dy1 + radius1 * Math.sin(nextAngle1)});
											}
										} else {
											var i5 = -1;
											while(true) {
												angle1 = i5 * angleInc1;
												++i5;
												nextAngle1 = angle1 + start1;
												if(angle1 >= dA + angleInc1) {
													break;
												}
												p2.push({ x : dx1 + radius1 * Math.cos(nextAngle1), y : dy1 + radius1 * Math.sin(nextAngle1)});
											}
											p2.reverse();
										}
										justTriangles_Draw.q0 = p2[0];
										justTriangles_Draw.q1 = p2[0];
										var draw2 = new justTriangles_Draw();
										draw2.create2Lines(p2[0],p2[1],p2[2],justTriangles_Draw.thickness);
										justTriangles_Draw.q0 = draw2.p3;
										justTriangles_Draw.q1 = draw2.p4;
										var _g13 = 1;
										var _g5 = p2.length - 2;
										while(_g13 < _g5) {
											draw2.rebuildAsPoly(p2[_g13++ + 2]);
											var q31 = draw2.p3;
											justTriangles_Draw.drawTri(id,true,justTriangles_Draw.q0,q31,p0_,justTriangles_Draw.colorId);
											justTriangles_Draw.q0 = q31;
										}
									}
									justTriangles_Draw.thickness = oldThickness;
								}
							}
							if(clockWise) {
								justTriangles_Draw.drawTri(id,true,draw.p3old2,q1,p0_,justTriangles_Draw.colorId);
							} else {
								justTriangles_Draw.drawTri(id,true,draw.p4old2,q0,p0_,justTriangles_Draw.colorId);
							}
						}
						justTriangles_Draw.drawTri(id,true,draw.p3old,draw.p3,draw.p4old,justTriangles_Draw.colorId);
						justTriangles_Draw.drawTri(id,true,draw.p3old,draw.p3,draw.p4,justTriangles_Draw.colorId);
					}
				}
				break;
			case 1:
				var draw3 = new justTriangles_Draw();
				justTriangles_Draw.colorId = this.lineColors[j];
				justTriangles_Draw.set_thick(this.thicks[j]);
				var _g31 = 0;
				var _g21 = pp01.length;
				while(_g31 < _g21) {
					var i6 = _g31++;
					if(i6 % 1 == 0 && i6 < pp01.length - 1) {
						var id1 = this.id;
						var p0_1 = pp01[i6];
						var p1_1 = pp01[i6 + 1];
						draw3.p0 = p1_1;
						draw3.p1 = p0_1;
						draw3.halfA = Math.PI / 2;
						draw3._thick = this.thick / 800;
						draw3.beta = Math.PI / 2 - draw3.halfA;
						draw3.r = draw3._thick / 2 * Math.cos(draw3.beta);
						draw3._theta = draw3.theta(draw3.p0,draw3.p1);
						if(draw3._theta > 0) {
							if(draw3.halfA < 0) {
								draw3.angle2 = draw3._theta + draw3.halfA + Math.PI / 2;
								draw3.angle1 = draw3._theta - draw3.halfA;
							} else {
								draw3.angle1 = draw3._theta + draw3.halfA - Math.PI;
								draw3.angle2 = draw3._theta + draw3.halfA;
							}
						} else if(draw3.halfA > 0) {
							draw3.angle1 = draw3._theta + draw3.halfA - Math.PI;
							draw3.angle2 = draw3._theta + draw3.halfA;
						} else {
							draw3.angle2 = draw3._theta + draw3.halfA + Math.PI / 2;
							draw3.angle1 = draw3._theta - draw3.halfA;
						}
						if(draw3.p3old != null) {
							draw3.p3old2 = draw3.p3old;
						}
						if(draw3.p4old != null) {
							draw3.p4old2 = draw3.p4old;
						}
						if(draw3.p3 != null) {
							draw3.p3old = draw3.p3;
						}
						if(draw3.p4 != null) {
							draw3.p4old = draw3.p4;
						}
						draw3.p3 = { x : draw3.p1.x + draw3.r * Math.cos(draw3.angle1), y : draw3.p1.y + draw3.r * Math.sin(draw3.angle1)};
						draw3.p4 = { x : draw3.p1.x + draw3.r * Math.cos(draw3.angle2), y : draw3.p1.y + draw3.r * Math.sin(draw3.angle2)};
						var q01 = { x : draw3.p3.x, y : draw3.p3.y};
						var q11 = { x : draw3.p4.x, y : draw3.p4.y};
						draw3.p0 = p0_1;
						draw3.p1 = p1_1;
						draw3._theta = draw3.theta(draw3.p0,draw3.p1);
						if(draw3._theta > 0) {
							if(draw3.halfA < 0) {
								draw3.angle2 = draw3._theta + draw3.halfA + Math.PI / 2;
								draw3.angle1 = draw3._theta - draw3.halfA;
							} else {
								draw3.angle1 = draw3._theta + draw3.halfA - Math.PI;
								draw3.angle2 = draw3._theta + draw3.halfA;
							}
						} else if(draw3.halfA > 0) {
							draw3.angle1 = draw3._theta + draw3.halfA - Math.PI;
							draw3.angle2 = draw3._theta + draw3.halfA;
						} else {
							draw3.angle2 = draw3._theta + draw3.halfA + Math.PI / 2;
							draw3.angle1 = draw3._theta - draw3.halfA;
						}
						if(draw3.p3old != null) {
							draw3.p3old2 = draw3.p3old;
						}
						if(draw3.p4old != null) {
							draw3.p4old2 = draw3.p4old;
						}
						if(draw3.p3 != null) {
							draw3.p3old = draw3.p3;
						}
						if(draw3.p4 != null) {
							draw3.p4old = draw3.p4;
						}
						draw3.p3 = { x : draw3.p1.x + draw3.r * Math.cos(draw3.angle1), y : draw3.p1.y + draw3.r * Math.sin(draw3.angle1)};
						draw3.p4 = { x : draw3.p1.x + draw3.r * Math.cos(draw3.angle2), y : draw3.p1.y + draw3.r * Math.sin(draw3.angle2)};
						if(draw3.p3old2 != null) {
							if(justTriangles_Draw.dist(draw3.p3old2,p1_1) > justTriangles_Draw.dist(draw3.p4old2,p1_1)) {
								justTriangles_Draw.drawTri(id1,true,draw3.p3old2,q11,p0_1,justTriangles_Draw.colorId);
							} else {
								justTriangles_Draw.drawTri(id1,true,draw3.p4old2,q01,p0_1,justTriangles_Draw.colorId);
							}
						}
						justTriangles_Draw.drawTri(id1,true,draw3.p3old,draw3.p3,draw3.p4old,justTriangles_Draw.colorId);
						justTriangles_Draw.drawTri(id1,true,draw3.p3old,draw3.p3,draw3.p4,justTriangles_Draw.colorId);
					}
				}
				break;
			case 2:
				justTriangles_Draw.colorId = this.lineColors[j];
				var id2 = this.id;
				justTriangles_Draw.q0 = pp01[0];
				justTriangles_Draw.q1 = pp01[0];
				var draw4 = new justTriangles_Draw();
				draw4.create2Lines(pp01[0],pp01[1],pp01[2],justTriangles_Draw.thickness);
				justTriangles_Draw.q0 = draw4.p3;
				justTriangles_Draw.q1 = draw4.p4;
				var _g14 = 1;
				var _g6 = pp01.length - 2;
				while(_g14 < _g6) {
					draw4.rebuildAsPoly(pp01[_g14++ + 2]);
					var q32 = draw4.p3;
					var q4 = draw4.p4;
					justTriangles_Draw.drawTri(id2,outline,justTriangles_Draw.q0,q32,justTriangles_Draw.q1,justTriangles_Draw.colorId);
					justTriangles_Draw.drawTri(id2,outline,justTriangles_Draw.q1,q32,q4,justTriangles_Draw.colorId);
					justTriangles_Draw.q0 = q32;
					justTriangles_Draw.q1 = q4;
				}
				break;
			case 3:
				justTriangles_Draw.colorId = this.lineColors[j];
				var _g32 = 0;
				var _g22 = pp01.length;
				while(_g32 < _g22) {
					var i7 = _g32++;
					if(i7 % 1 == 0 && i7 < pp01.length - 2) {
						var id3 = this.id;
						var draw5 = new justTriangles_Draw();
						draw5.create2Lines(pp01[i7],pp01[i7 + 1],pp01[i7 + 2],justTriangles_Draw.thickness);
						var q33 = draw5.p3;
						var q41 = draw5.p4;
						if(i7 != 0) {
							justTriangles_Draw.drawTri(id3,outline,justTriangles_Draw.q0,q33,justTriangles_Draw.q1,justTriangles_Draw.colorId);
							justTriangles_Draw.drawTri(id3,outline,justTriangles_Draw.q1,q33,q41,justTriangles_Draw.colorId);
						}
						justTriangles_Draw.q0 = q33;
						justTriangles_Draw.q1 = q41;
					}
				}
				break;
			case 4:
				justTriangles_Draw.colorId = this.lineColors[j];
				var _g33 = 0;
				var _g23 = pp01.length;
				while(_g33 < _g23) {
					var i8 = _g33++;
					if(i8 % 1 == 0 && i8 < pp01.length - 2) {
						var id4 = this.id;
						var p0_2 = pp01[i8];
						var p1_2 = pp01[i8 + 1];
						var thick1 = this.thick / 800;
						var draw6 = new justTriangles_Draw();
						draw6.p0 = p1_2;
						draw6.p1 = p0_2;
						draw6.halfA = Math.PI / 2;
						draw6._thick = thick1;
						draw6.beta = Math.PI / 2 - draw6.halfA;
						draw6.r = draw6._thick / 2 * Math.cos(draw6.beta);
						draw6._theta = draw6.theta(draw6.p0,draw6.p1);
						if(draw6._theta > 0) {
							if(draw6.halfA < 0) {
								draw6.angle2 = draw6._theta + draw6.halfA + Math.PI / 2;
								draw6.angle1 = draw6._theta - draw6.halfA;
							} else {
								draw6.angle1 = draw6._theta + draw6.halfA - Math.PI;
								draw6.angle2 = draw6._theta + draw6.halfA;
							}
						} else if(draw6.halfA > 0) {
							draw6.angle1 = draw6._theta + draw6.halfA - Math.PI;
							draw6.angle2 = draw6._theta + draw6.halfA;
						} else {
							draw6.angle2 = draw6._theta + draw6.halfA + Math.PI / 2;
							draw6.angle1 = draw6._theta - draw6.halfA;
						}
						if(draw6.p3old != null) {
							draw6.p3old2 = draw6.p3old;
						}
						if(draw6.p4old != null) {
							draw6.p4old2 = draw6.p4old;
						}
						if(draw6.p3 != null) {
							draw6.p3old = draw6.p3;
						}
						if(draw6.p4 != null) {
							draw6.p4old = draw6.p4;
						}
						draw6.p3 = { x : draw6.p1.x + draw6.r * Math.cos(draw6.angle1), y : draw6.p1.y + draw6.r * Math.sin(draw6.angle1)};
						draw6.p4 = { x : draw6.p1.x + draw6.r * Math.cos(draw6.angle2), y : draw6.p1.y + draw6.r * Math.sin(draw6.angle2)};
						var q02 = { x : draw6.p3.x, y : draw6.p3.y};
						var q12 = { x : draw6.p4.x, y : draw6.p4.y};
						draw6.p0 = p0_2;
						draw6.p1 = p1_2;
						draw6._theta = draw6.theta(draw6.p0,draw6.p1);
						if(draw6._theta > 0) {
							if(draw6.halfA < 0) {
								draw6.angle2 = draw6._theta + draw6.halfA + Math.PI / 2;
								draw6.angle1 = draw6._theta - draw6.halfA;
							} else {
								draw6.angle1 = draw6._theta + draw6.halfA - Math.PI;
								draw6.angle2 = draw6._theta + draw6.halfA;
							}
						} else if(draw6.halfA > 0) {
							draw6.angle1 = draw6._theta + draw6.halfA - Math.PI;
							draw6.angle2 = draw6._theta + draw6.halfA;
						} else {
							draw6.angle2 = draw6._theta + draw6.halfA + Math.PI / 2;
							draw6.angle1 = draw6._theta - draw6.halfA;
						}
						if(draw6.p3old != null) {
							draw6.p3old2 = draw6.p3old;
						}
						if(draw6.p4old != null) {
							draw6.p4old2 = draw6.p4old;
						}
						if(draw6.p3 != null) {
							draw6.p3old = draw6.p3;
						}
						if(draw6.p4 != null) {
							draw6.p4old = draw6.p4;
						}
						draw6.p3 = { x : draw6.p1.x + draw6.r * Math.cos(draw6.angle1), y : draw6.p1.y + draw6.r * Math.sin(draw6.angle1)};
						draw6.p4 = { x : draw6.p1.x + draw6.r * Math.cos(draw6.angle2), y : draw6.p1.y + draw6.r * Math.sin(draw6.angle2)};
						var oldThickness1 = justTriangles_Draw.thickness;
						justTriangles_Draw.thickness = thick1 / 2;
						var temp = draw6.angle1;
						var dx2 = p0_2.x;
						var dy2 = p0_2.y;
						var radius2 = thick1 / 4;
						var dA1 = Math.PI;
						var p3 = [];
						var angle2 = 0;
						var angleInc2 = Math.PI * 2 / 24;
						var nextAngle2;
						if(dA1 < 0) {
							var i9 = -1;
							while(true) {
								angle2 = i9 * angleInc2;
								--i9;
								nextAngle2 = angle2 + temp;
								if(angle2 <= dA1) {
									break;
								}
								p3.push({ x : dx2 + radius2 * Math.cos(nextAngle2), y : dy2 + radius2 * Math.sin(nextAngle2)});
							}
						} else {
							var i10 = -1;
							while(true) {
								angle2 = i10 * angleInc2;
								++i10;
								nextAngle2 = angle2 + temp;
								if(angle2 >= dA1 + angleInc2) {
									break;
								}
								p3.push({ x : dx2 + radius2 * Math.cos(nextAngle2), y : dy2 + radius2 * Math.sin(nextAngle2)});
							}
						}
						p3.reverse();
						justTriangles_Draw.q0 = p3[0];
						justTriangles_Draw.q1 = p3[0];
						var draw7 = new justTriangles_Draw();
						draw7.create2Lines(p3[0],p3[1],p3[2],justTriangles_Draw.thickness);
						justTriangles_Draw.q0 = draw7.p3;
						justTriangles_Draw.q1 = draw7.p4;
						var _g15 = 1;
						var _g7 = p3.length - 2;
						while(_g15 < _g7) {
							draw7.rebuildAsPoly(p3[_g15++ + 2]);
							var q34 = draw7.p3;
							justTriangles_Draw.drawTri(id4,true,justTriangles_Draw.q0,q34,p0_2,justTriangles_Draw.colorId);
							justTriangles_Draw.q0 = q34;
						}
						temp += Math.PI;
						var dx3 = p1_2.x;
						var dy3 = p1_2.y;
						var radius3 = thick1 / 4;
						var dA2 = Math.PI;
						var p4 = [];
						var angle3 = 0;
						var angleInc3 = Math.PI * 2 / 24;
						var nextAngle3;
						if(dA2 < 0) {
							var i11 = -1;
							while(true) {
								angle3 = i11 * angleInc3;
								--i11;
								nextAngle3 = angle3 + temp;
								if(angle3 <= dA2) {
									break;
								}
								p4.push({ x : dx3 + radius3 * Math.cos(nextAngle3), y : dy3 + radius3 * Math.sin(nextAngle3)});
							}
						} else {
							var i12 = -1;
							while(true) {
								angle3 = i12 * angleInc3;
								++i12;
								nextAngle3 = angle3 + temp;
								if(angle3 >= dA2 + angleInc3) {
									break;
								}
								p4.push({ x : dx3 + radius3 * Math.cos(nextAngle3), y : dy3 + radius3 * Math.sin(nextAngle3)});
							}
						}
						p4.reverse();
						justTriangles_Draw.q0 = p4[0];
						justTriangles_Draw.q1 = p4[0];
						var draw8 = new justTriangles_Draw();
						draw8.create2Lines(p4[0],p4[1],p4[2],justTriangles_Draw.thickness);
						justTriangles_Draw.q0 = draw8.p3;
						justTriangles_Draw.q1 = draw8.p4;
						var _g16 = 1;
						var _g8 = p4.length - 2;
						while(_g16 < _g8) {
							draw8.rebuildAsPoly(p4[_g16++ + 2]);
							var q35 = draw8.p3;
							justTriangles_Draw.drawTri(id4,true,justTriangles_Draw.q0,q35,p1_2,justTriangles_Draw.colorId);
							justTriangles_Draw.q0 = q35;
						}
						justTriangles_Draw.thickness = oldThickness1;
						var q36 = { x : draw6.p3.x, y : draw6.p3.y};
						var q42 = { x : draw6.p4.x, y : draw6.p4.y};
						justTriangles_Draw.drawTri(id4,true,q02,q36,q12,justTriangles_Draw.colorId);
						justTriangles_Draw.drawTri(id4,true,q02,q36,q42,justTriangles_Draw.colorId);
					}
				}
				break;
			case 5:
				justTriangles_Draw.colorId = this.lineColors[j];
				var _g34 = 0;
				var _g24 = pp01.length;
				while(_g34 < _g24) {
					var i13 = _g34++;
					if(i13 % 1 == 0 && i13 < pp01.length - 2) {
						var id5 = this.id;
						var p0_3 = pp01[i13];
						var p1_3 = pp01[i13 + 1];
						var draw9 = new justTriangles_Draw();
						draw9.p0 = p1_3;
						draw9.p1 = p0_3;
						draw9.halfA = Math.PI / 2;
						draw9._thick = this.thick / 800;
						draw9.beta = Math.PI / 2 - draw9.halfA;
						draw9.r = draw9._thick / 2 * Math.cos(draw9.beta);
						draw9._theta = draw9.theta(draw9.p0,draw9.p1);
						if(draw9._theta > 0) {
							if(draw9.halfA < 0) {
								draw9.angle2 = draw9._theta + draw9.halfA + Math.PI / 2;
								draw9.angle1 = draw9._theta - draw9.halfA;
							} else {
								draw9.angle1 = draw9._theta + draw9.halfA - Math.PI;
								draw9.angle2 = draw9._theta + draw9.halfA;
							}
						} else if(draw9.halfA > 0) {
							draw9.angle1 = draw9._theta + draw9.halfA - Math.PI;
							draw9.angle2 = draw9._theta + draw9.halfA;
						} else {
							draw9.angle2 = draw9._theta + draw9.halfA + Math.PI / 2;
							draw9.angle1 = draw9._theta - draw9.halfA;
						}
						if(draw9.p3old != null) {
							draw9.p3old2 = draw9.p3old;
						}
						if(draw9.p4old != null) {
							draw9.p4old2 = draw9.p4old;
						}
						if(draw9.p3 != null) {
							draw9.p3old = draw9.p3;
						}
						if(draw9.p4 != null) {
							draw9.p4old = draw9.p4;
						}
						draw9.p3 = { x : draw9.p1.x + draw9.r * Math.cos(draw9.angle1), y : draw9.p1.y + draw9.r * Math.sin(draw9.angle1)};
						draw9.p4 = { x : draw9.p1.x + draw9.r * Math.cos(draw9.angle2), y : draw9.p1.y + draw9.r * Math.sin(draw9.angle2)};
						var q03 = { x : draw9.p3.x, y : draw9.p3.y};
						var q13 = { x : draw9.p4.x, y : draw9.p4.y};
						draw9.p0 = p0_3;
						draw9.p1 = p1_3;
						draw9._theta = draw9.theta(draw9.p0,draw9.p1);
						if(draw9._theta > 0) {
							if(draw9.halfA < 0) {
								draw9.angle2 = draw9._theta + draw9.halfA + Math.PI / 2;
								draw9.angle1 = draw9._theta - draw9.halfA;
							} else {
								draw9.angle1 = draw9._theta + draw9.halfA - Math.PI;
								draw9.angle2 = draw9._theta + draw9.halfA;
							}
						} else if(draw9.halfA > 0) {
							draw9.angle1 = draw9._theta + draw9.halfA - Math.PI;
							draw9.angle2 = draw9._theta + draw9.halfA;
						} else {
							draw9.angle2 = draw9._theta + draw9.halfA + Math.PI / 2;
							draw9.angle1 = draw9._theta - draw9.halfA;
						}
						if(draw9.p3old != null) {
							draw9.p3old2 = draw9.p3old;
						}
						if(draw9.p4old != null) {
							draw9.p4old2 = draw9.p4old;
						}
						if(draw9.p3 != null) {
							draw9.p3old = draw9.p3;
						}
						if(draw9.p4 != null) {
							draw9.p4old = draw9.p4;
						}
						draw9.p3 = { x : draw9.p1.x + draw9.r * Math.cos(draw9.angle1), y : draw9.p1.y + draw9.r * Math.sin(draw9.angle1)};
						draw9.p4 = { x : draw9.p1.x + draw9.r * Math.cos(draw9.angle2), y : draw9.p1.y + draw9.r * Math.sin(draw9.angle2)};
						var q37 = { x : draw9.p3.x, y : draw9.p3.y};
						var q43 = { x : draw9.p4.x, y : draw9.p4.y};
						justTriangles_Draw.drawTri(id5,true,q03,q37,q13,justTriangles_Draw.colorId);
						justTriangles_Draw.drawTri(id5,true,q03,q37,q43,justTriangles_Draw.colorId);
					}
				}
				break;
			case 6:
				justTriangles_Draw.colorId = this.lineColors[j];
				var _g35 = 0;
				var _g25 = pp01.length;
				while(_g35 < _g25) {
					var i14 = _g35++;
					if(i14 % 1 == 0 && i14 < pp01.length - 2) {
						var id6 = this.id;
						var draw10 = new justTriangles_Draw();
						draw10.create2Lines(pp01[i14],pp01[i14 + 1],pp01[i14 + 2],justTriangles_Draw.thickness);
						var q38 = draw10.p3;
						var q44 = draw10.p4;
						if(i14 != 0) {
							justTriangles_Draw.drawTri(id6,outline,justTriangles_Draw.q0,q38,justTriangles_Draw.q1,justTriangles_Draw.colorId);
							justTriangles_Draw.drawTri(id6,outline,justTriangles_Draw.q1,q38,q44,justTriangles_Draw.colorId);
						}
						justTriangles_Draw.q0 = q38;
						justTriangles_Draw.q1 = q44;
					}
				}
				break;
			}
			++j;
		}
	}
	,__class__: justTriangles_PathContext
};
var justTriangles__$PolyK_ArrayTriple_$Impl_$ = {};
justTriangles__$PolyK_ArrayTriple_$Impl_$.__name__ = true;
justTriangles__$PolyK_ArrayTriple_$Impl_$._new = function(arr) {
	return arr;
};
var justTriangles_ShapePoints = function() { };
justTriangles_ShapePoints.__name__ = true;
var justTriangles_StoreF6 = function() {
	this.count = 0;
	this.l = 0;
};
justTriangles_StoreF6.__name__ = true;
justTriangles_StoreF6.prototype = {
	hasNext: function() {
		return this.count < this.l + 1;
	}
	,next: function() {
		var out = null;
		switch(this.count) {
		case 0:
			out = this.s0;
			break;
		case 1:
			out = this.s1;
			break;
		case 2:
			out = this.s2;
			break;
		case 3:
			out = this.s3;
			break;
		case 4:
			out = this.s4;
			break;
		case 5:
			out = this.s5;
			break;
		default:
		}
		this.count++;
		return out;
	}
	,__class__: justTriangles_StoreF6
};
var justTriangles_SvgPath = function(pathContext_) {
	this.sy = 1;
	this.sx = 1;
	this.dy = 0;
	this.dx = 0;
	this.lastY = 0;
	this.lastX = 0;
	this.pathContext = pathContext_;
};
justTriangles_SvgPath.__name__ = true;
justTriangles_SvgPath.prototype = {
	parse: function(str_,dx_,dy_,sx_,sy_) {
		if(sy_ == null) {
			sy_ = 1;
		}
		if(sx_ == null) {
			sx_ = 1;
		}
		if(dy_ == null) {
			dy_ = 0;
		}
		if(dx_ == null) {
			dx_ = 0;
		}
		this.str = str_;
		this.dx = dx_;
		this.dy = dy_;
		this.sx = sx_;
		this.sy = sy_;
		this.pos = 0;
		this.l = this.str.length;
		this.c = this.str.charCodeAt(this.pos++);
		this.store = new justTriangles_StoreF6();
		while(this.pos < this.l) {
			switch(this.c) {
			case 65:
				console.log("elliptical_Arc - not implemented");
				this.extractArgs();
				break;
			case 66:
				console.log("bearing - not implemented");
				throw new js__$Boot_HaxeError("bearing not supported please remove");
				break;
			case 67:
				this.extractArgs();
				this.controlX = this.store.s2;
				this.controlY = this.store.s3;
				this.lastX = this.store.s4;
				this.lastY = this.store.s5;
				this.pathContext.curveTo(this.store.s0,this.store.s1,this.controlX,this.controlY,this.lastX,this.lastY);
				break;
			case 72:
				this.extractArgs(false);
				this.lastX = this.store.s0 * this.sx + this.dx;
				this.pathContext.lineTo(this.lastX,this.lastY);
				break;
			case 76:
				this.extractArgs();
				this.lastX = this.store.s0;
				this.lastY = this.store.s1;
				this.pathContext.lineTo(this.lastX,this.lastY);
				break;
			case 77:
				this.extractArgs();
				this.lastX = this.store.s0;
				this.lastY = this.store.s1;
				this.pathContext.moveTo(this.lastX,this.lastY);
				break;
			case 81:
				this.extractArgs();
				this.controlX = this.store.s0;
				this.controlY = this.store.s1;
				this.lastX = this.store.s2;
				this.lastY = this.store.s3;
				this.pathContext.quadTo(this.controlX,this.controlY,this.lastX,this.lastY);
				break;
			case 83:
				this.extractArgs();
				this.controlX = 2 * this.lastX - this.controlX;
				this.controlY = 2 * this.lastY - this.controlY;
				this.pathContext.curveTo(this.controlX,this.controlY,this.store.s0,this.store.s1,this.store.s2,this.store.s3);
				this.controlX = this.store.s0;
				this.controlY = this.store.s1;
				break;
			case 84:
				this.extractArgs();
				this.controlX = 2 * this.lastX - this.controlX;
				this.controlY = 2 * this.lastY - this.controlY;
				this.lastX = this.store.s0;
				this.lastY = this.store.s1;
				this.pathContext.quadTo(this.controlX,this.controlY,this.lastX,this.lastY);
				break;
			case 86:
				this.extractArgs(false);
				this.lastY = this.store.s0 * this.sy + this.dy;
				this.pathContext.lineTo(this.lastX,this.lastY);
				break;
			case 90:case 122:
				this.lastX = 0;
				this.lastY = 0;
				break;
			case 97:
				console.log("relative elliptical_Arc - not implemented");
				this.extractArgs();
				break;
			case 99:
				this.extractArgs();
				this.controlX = this.store.s2 + this.lastX;
				this.controlY = this.store.s3 + this.lastY;
				var endX = this.store.s4 + this.lastX;
				var endY = this.store.s5 + this.lastY;
				this.pathContext.curveTo(this.store.s0 + this.lastX,this.store.s1 + this.lastY,this.controlX,this.controlY,endX,endY);
				this.lastX = endX;
				this.lastY = endY;
				break;
			case 104:
				this.extractArgs(false);
				this.lastX = this.lastX + this.store.s0 * this.sx + this.dx;
				this.pathContext.lineTo(this.lastX,this.lastY);
				break;
			case 108:
				this.extractArgs();
				this.lastX = this.store.s0 + this.lastX;
				this.lastY = this.store.s1 + this.lastY;
				this.pathContext.lineTo(this.lastX,this.lastY);
				break;
			case 109:
				this.extractArgs();
				this.lastX = this.store.s0 + this.lastX;
				this.lastY = this.store.s1 + this.lastY;
				this.pathContext.moveTo(this.lastX,this.lastY);
				break;
			case 113:
				this.extractArgs();
				this.controlX = this.lastX + this.store.s0;
				this.controlY = this.lastY + this.store.s1;
				this.lastX = this.store.s0 + this.lastX;
				this.lastY = this.store.s1 + this.lastY;
				this.pathContext.quadTo(this.controlX,this.controlY,this.lastX,this.lastY);
				break;
			case 115:
				this.extractArgs();
				this.controlX = 2 * this.lastX - this.controlX;
				this.controlY = 2 * this.lastY - this.controlY;
				var endX1 = this.store.s2 + this.lastX;
				var endY1 = this.store.s3 + this.lastY;
				this.pathContext.curveTo(this.controlX,this.controlY,this.store.s0 + this.lastX,this.store.s1 + this.lastY,endX1,endY1);
				this.controlX = this.store.s0 + this.lastX;
				this.controlY = this.store.s1 + this.lastY;
				this.lastX = endX1;
				this.lastY = endY1;
				break;
			case 116:
				this.extractArgs();
				this.controlX = 2 * this.lastX - this.controlX;
				this.controlY = 2 * this.lastY - this.controlY;
				this.lastX = this.store.s0 + this.lastY;
				this.lastY = this.store.s1 + this.lastX;
				this.pathContext.quadTo(this.controlX,this.controlY,this.lastX,this.lastY);
				break;
			case 118:
				this.extractArgs(false);
				this.lastY = this.lastY + this.store.s0 * this.sy + this.dy;
				this.pathContext.lineTo(this.lastX,this.lastY);
				break;
			default:
			}
			this.c = this.str.charCodeAt(this.pos++);
		}
		return str_;
	}
	,extractArgs: function(process) {
		if(process == null) {
			process = true;
		}
		var _this = this.store;
		_this.l = 0;
		_this.s0 = null;
		_this.s1 = null;
		_this.s2 = null;
		_this.s3 = null;
		_this.s4 = null;
		_this.s5 = null;
		this.c = this.str.charCodeAt(this.pos++);
		var temp = "";
		try {
			while(true) {
				switch(this.c) {
				case 32:case 44:
					if(temp != "") {
						if(temp == "0") {
							temp = "0.1";
						}
						if(process) {
							if((this.store.l & 1) == 0) {
								var _this1 = this.store;
								var v = parseFloat(temp) * this.sx + this.dx;
								switch(_this1.l) {
								case 0:
									_this1.s0 = v;
									break;
								case 1:
									_this1.s1 = v;
									break;
								case 2:
									_this1.s2 = v;
									break;
								case 3:
									_this1.s3 = v;
									break;
								case 4:
									_this1.s4 = v;
									break;
								case 5:
									_this1.s5 = v;
									break;
								default:
								}
								_this1.l++;
							} else {
								var _this2 = this.store;
								var v1 = parseFloat(temp) * this.sy + this.dy;
								switch(_this2.l) {
								case 0:
									_this2.s0 = v1;
									break;
								case 1:
									_this2.s1 = v1;
									break;
								case 2:
									_this2.s2 = v1;
									break;
								case 3:
									_this2.s3 = v1;
									break;
								case 4:
									_this2.s4 = v1;
									break;
								case 5:
									_this2.s5 = v1;
									break;
								default:
								}
								_this2.l++;
							}
						} else {
							var _this3 = this.store;
							var v2 = parseFloat(temp);
							switch(_this3.l) {
							case 0:
								_this3.s0 = v2;
								break;
							case 1:
								_this3.s1 = v2;
								break;
							case 2:
								_this3.s2 = v2;
								break;
							case 3:
								_this3.s3 = v2;
								break;
							case 4:
								_this3.s4 = v2;
								break;
							case 5:
								_this3.s5 = v2;
								break;
							default:
							}
							_this3.l++;
						}
						temp = "";
					}
					break;
				case 45:
					if(temp != "") {
						if(temp == "0") {
							temp = "0.1";
						}
						if(process) {
							if((this.store.l & 1) == 0) {
								var _this4 = this.store;
								var v3 = parseFloat(temp) * this.sx + this.dx;
								switch(_this4.l) {
								case 0:
									_this4.s0 = v3;
									break;
								case 1:
									_this4.s1 = v3;
									break;
								case 2:
									_this4.s2 = v3;
									break;
								case 3:
									_this4.s3 = v3;
									break;
								case 4:
									_this4.s4 = v3;
									break;
								case 5:
									_this4.s5 = v3;
									break;
								default:
								}
								_this4.l++;
							} else {
								var _this5 = this.store;
								var v4 = parseFloat(temp) * this.sy + this.dy;
								switch(_this5.l) {
								case 0:
									_this5.s0 = v4;
									break;
								case 1:
									_this5.s1 = v4;
									break;
								case 2:
									_this5.s2 = v4;
									break;
								case 3:
									_this5.s3 = v4;
									break;
								case 4:
									_this5.s4 = v4;
									break;
								case 5:
									_this5.s5 = v4;
									break;
								default:
								}
								_this5.l++;
							}
						} else {
							var _this6 = this.store;
							var v5 = parseFloat(temp);
							switch(_this6.l) {
							case 0:
								_this6.s0 = v5;
								break;
							case 1:
								_this6.s1 = v5;
								break;
							case 2:
								_this6.s2 = v5;
								break;
							case 3:
								_this6.s3 = v5;
								break;
							case 4:
								_this6.s4 = v5;
								break;
							case 5:
								_this6.s5 = v5;
								break;
							default:
							}
							_this6.l++;
						}
					}
					temp = "-";
					break;
				case 46:
					temp += ".";
					break;
				case 48:
					temp += "0";
					break;
				case 49:
					temp += "1";
					break;
				case 50:
					temp += "2";
					break;
				case 51:
					temp += "3";
					break;
				case 52:
					temp += "4";
					break;
				case 53:
					temp += "5";
					break;
				case 54:
					temp += "6";
					break;
				case 55:
					temp += "7";
					break;
				case 56:
					temp += "8";
					break;
				case 57:
					temp += "9";
					break;
				default:
					if(temp != "") {
						if(temp == "0") {
							temp = "0.1";
						}
						if(process) {
							if((this.store.l & 1) == 0) {
								var _this7 = this.store;
								var v6 = parseFloat(temp) * this.sx + this.dx;
								switch(_this7.l) {
								case 0:
									_this7.s0 = v6;
									break;
								case 1:
									_this7.s1 = v6;
									break;
								case 2:
									_this7.s2 = v6;
									break;
								case 3:
									_this7.s3 = v6;
									break;
								case 4:
									_this7.s4 = v6;
									break;
								case 5:
									_this7.s5 = v6;
									break;
								default:
								}
								_this7.l++;
							} else {
								var _this8 = this.store;
								var v7 = parseFloat(temp) * this.sy + this.dy;
								switch(_this8.l) {
								case 0:
									_this8.s0 = v7;
									break;
								case 1:
									_this8.s1 = v7;
									break;
								case 2:
									_this8.s2 = v7;
									break;
								case 3:
									_this8.s3 = v7;
									break;
								case 4:
									_this8.s4 = v7;
									break;
								case 5:
									_this8.s5 = v7;
									break;
								default:
								}
								_this8.l++;
							}
						} else {
							var _this9 = this.store;
							var v8 = parseFloat(temp);
							switch(_this9.l) {
							case 0:
								_this9.s0 = v8;
								break;
							case 1:
								_this9.s1 = v8;
								break;
							case 2:
								_this9.s2 = v8;
								break;
							case 3:
								_this9.s3 = v8;
								break;
							case 4:
								_this9.s4 = v8;
								break;
							case 5:
								_this9.s5 = v8;
								break;
							default:
							}
							_this9.l++;
						}
						temp = "";
					}
					this.pos--;
					throw "__break__";
				}
				this.c = this.str.charCodeAt(this.pos++);
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
	}
	,__class__: justTriangles_SvgPath
};
var justTriangles_Triangle = function(id_,outline_,A_,B_,C_,depth_,colorID_) {
	var p1_y;
	var p1_x;
	var p0_y;
	var p0_x;
	this.id = id_;
	this.outline = outline_;
	p0_x = B_.x - A_.x;
	p0_y = B_.y - A_.y;
	p1_x = C_.x - A_.x;
	p1_y = C_.y - A_.y;
	var val = !(p0_x * p1_y - p0_y * p1_x < 0);
	if(val) {
		this.ax = A_.x;
		this.ay = A_.y;
		this.bx = C_.x;
		this.by = C_.y;
		this.cx = B_.x;
		this.cy = B_.y;
	} else {
		this.ax = A_.x;
		this.ay = A_.y;
		this.bx = B_.x;
		this.by = B_.y;
		this.cx = C_.x;
		this.cy = C_.y;
	}
	this.windingAdjusted = val;
	this.depth = depth_;
	this.colorID = colorID_;
	this.colorA = colorID_;
	this.colorB = colorID_;
	this.colorC = colorID_;
};
justTriangles_Triangle.__name__ = true;
justTriangles_Triangle.drawTri = function(id,outline,p0,p1,p2,colorID) {
	justTriangles_Triangle.triangles.push(new justTriangles_Triangle(id,outline,p0,p1,p2,0,colorID));
};
justTriangles_Triangle.prototype = {
	__class__: justTriangles_Triangle
};
var khaMath_Matrix4 = function(_00,_10,_20,_30,_01,_11,_21,_31,_02,_12,_22,_32,_03,_13,_23,_33) {
	this._00 = _00;
	this._10 = _10;
	this._20 = _20;
	this._30 = _30;
	this._01 = _01;
	this._11 = _11;
	this._21 = _21;
	this._31 = _31;
	this._02 = _02;
	this._12 = _12;
	this._22 = _22;
	this._32 = _32;
	this._03 = _03;
	this._13 = _13;
	this._23 = _23;
	this._33 = _33;
};
khaMath_Matrix4.__name__ = true;
khaMath_Matrix4.prototype = {
	__class__: khaMath_Matrix4
};
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var Float32Array = $global.Float32Array || js_html_compat_Float32Array._new;
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
js_Boot.__toStr = ({ }).toString;
js_html_compat_Float32Array.BYTES_PER_ELEMENT = 4;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
justTriangles_ShapePoints.quadStep = 0.03;
justTriangles_ShapePoints.cubicStep = 0.03;
justTriangles_Triangle.triangles = [];
Test.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
